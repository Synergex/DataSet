'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class NewDataSet
    Inherits DataSet
    
    Private tableCUSTOMERS As CUSTOMERSDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CUSTOMERS")) Is Nothing) Then
                Me.Tables.Add(New CUSTOMERSDataTable(ds.Tables("CUSTOMERS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CUSTOMERS As CUSTOMERSDataTable
        Get
            Return Me.tableCUSTOMERS
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As NewDataSet = CType(MyBase.Clone,NewDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CUSTOMERS")) Is Nothing) Then
            Me.Tables.Add(New CUSTOMERSDataTable(ds.Tables("CUSTOMERS")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCUSTOMERS = CType(Me.Tables("CUSTOMERS"),CUSTOMERSDataTable)
        If (Not (Me.tableCUSTOMERS) Is Nothing) Then
            Me.tableCUSTOMERS.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "NewDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/NewDataSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCUSTOMERS = New CUSTOMERSDataTable
        Me.Tables.Add(Me.tableCUSTOMERS)
    End Sub
    
    Private Function ShouldSerializeCUSTOMERS() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CUSTOMERSRowChangeEventHandler(ByVal sender As Object, ByVal e As CUSTOMERSRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CUSTOMERSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCUST_KEY As DataColumn
        
        Private columnCUST_RTYPE As DataColumn
        
        Private columnCUST_NAME As DataColumn
        
        Private columnCUST_STREET As DataColumn
        
        Private columnCUST_CITY As DataColumn
        
        Private columnCUST_STATE As DataColumn
        
        Private columnCUST_ZIP As DataColumn
        
        Private columnCUST_CONTACT As DataColumn
        
        Private columnCUST_PHONE As DataColumn
        
        Private columnCUST_FAX As DataColumn
        
        Private columnCUST_GIFT As DataColumn
        
        Private columnCUST_TCODE As DataColumn
        
        Private columnCUST_TAXNO As DataColumn
        
        Private columnCUST_LIMIT As DataColumn
        
        Friend Sub New()
            MyBase.New("CUSTOMERS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CUST_KEYColumn As DataColumn
            Get
                Return Me.columnCUST_KEY
            End Get
        End Property
        
        Friend ReadOnly Property CUST_RTYPEColumn As DataColumn
            Get
                Return Me.columnCUST_RTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CUST_NAMEColumn As DataColumn
            Get
                Return Me.columnCUST_NAME
            End Get
        End Property
        
        Friend ReadOnly Property CUST_STREETColumn As DataColumn
            Get
                Return Me.columnCUST_STREET
            End Get
        End Property
        
        Friend ReadOnly Property CUST_CITYColumn As DataColumn
            Get
                Return Me.columnCUST_CITY
            End Get
        End Property
        
        Friend ReadOnly Property CUST_STATEColumn As DataColumn
            Get
                Return Me.columnCUST_STATE
            End Get
        End Property
        
        Friend ReadOnly Property CUST_ZIPColumn As DataColumn
            Get
                Return Me.columnCUST_ZIP
            End Get
        End Property
        
        Friend ReadOnly Property CUST_CONTACTColumn As DataColumn
            Get
                Return Me.columnCUST_CONTACT
            End Get
        End Property
        
        Friend ReadOnly Property CUST_PHONEColumn As DataColumn
            Get
                Return Me.columnCUST_PHONE
            End Get
        End Property
        
        Friend ReadOnly Property CUST_FAXColumn As DataColumn
            Get
                Return Me.columnCUST_FAX
            End Get
        End Property
        
        Friend ReadOnly Property CUST_GIFTColumn As DataColumn
            Get
                Return Me.columnCUST_GIFT
            End Get
        End Property
        
        Friend ReadOnly Property CUST_TCODEColumn As DataColumn
            Get
                Return Me.columnCUST_TCODE
            End Get
        End Property
        
        Friend ReadOnly Property CUST_TAXNOColumn As DataColumn
            Get
                Return Me.columnCUST_TAXNO
            End Get
        End Property
        
        Friend ReadOnly Property CUST_LIMITColumn As DataColumn
            Get
                Return Me.columnCUST_LIMIT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CUSTOMERSRow
            Get
                Return CType(Me.Rows(index),CUSTOMERSRow)
            End Get
        End Property
        
        Public Event CUSTOMERSRowChanged As CUSTOMERSRowChangeEventHandler
        
        Public Event CUSTOMERSRowChanging As CUSTOMERSRowChangeEventHandler
        
        Public Event CUSTOMERSRowDeleted As CUSTOMERSRowChangeEventHandler
        
        Public Event CUSTOMERSRowDeleting As CUSTOMERSRowChangeEventHandler
        
        Public Overloads Sub AddCUSTOMERSRow(ByVal row As CUSTOMERSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCUSTOMERSRow(ByVal CUST_KEY As Integer, ByVal CUST_RTYPE As Short, ByVal CUST_NAME As String, ByVal CUST_STREET As String, ByVal CUST_CITY As String, ByVal CUST_STATE As String, ByVal CUST_ZIP As Integer, ByVal CUST_CONTACT As String, ByVal CUST_PHONE As Decimal, ByVal CUST_FAX As Decimal, ByVal CUST_GIFT As Integer, ByVal CUST_TCODE As String, ByVal CUST_TAXNO As Integer, ByVal CUST_LIMIT As Decimal) As CUSTOMERSRow
            Dim rowCUSTOMERSRow As CUSTOMERSRow = CType(Me.NewRow,CUSTOMERSRow)
            rowCUSTOMERSRow.ItemArray = New Object() {CUST_KEY, CUST_RTYPE, CUST_NAME, CUST_STREET, CUST_CITY, CUST_STATE, CUST_ZIP, CUST_CONTACT, CUST_PHONE, CUST_FAX, CUST_GIFT, CUST_TCODE, CUST_TAXNO, CUST_LIMIT}
            Me.Rows.Add(rowCUSTOMERSRow)
            Return rowCUSTOMERSRow
        End Function
        
        Public Function FindByCUST_KEY(ByVal CUST_KEY As Integer) As CUSTOMERSRow
            Return CType(Me.Rows.Find(New Object() {CUST_KEY}),CUSTOMERSRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CUSTOMERSDataTable = CType(MyBase.Clone,CUSTOMERSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CUSTOMERSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCUST_KEY = Me.Columns("CUST_KEY")
            Me.columnCUST_RTYPE = Me.Columns("CUST_RTYPE")
            Me.columnCUST_NAME = Me.Columns("CUST_NAME")
            Me.columnCUST_STREET = Me.Columns("CUST_STREET")
            Me.columnCUST_CITY = Me.Columns("CUST_CITY")
            Me.columnCUST_STATE = Me.Columns("CUST_STATE")
            Me.columnCUST_ZIP = Me.Columns("CUST_ZIP")
            Me.columnCUST_CONTACT = Me.Columns("CUST_CONTACT")
            Me.columnCUST_PHONE = Me.Columns("CUST_PHONE")
            Me.columnCUST_FAX = Me.Columns("CUST_FAX")
            Me.columnCUST_GIFT = Me.Columns("CUST_GIFT")
            Me.columnCUST_TCODE = Me.Columns("CUST_TCODE")
            Me.columnCUST_TAXNO = Me.Columns("CUST_TAXNO")
            Me.columnCUST_LIMIT = Me.Columns("CUST_LIMIT")
        End Sub
        
        Private Sub InitClass()
            Me.columnCUST_KEY = New DataColumn("CUST_KEY", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_KEY)
            Me.columnCUST_RTYPE = New DataColumn("CUST_RTYPE", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_RTYPE)
            Me.columnCUST_NAME = New DataColumn("CUST_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_NAME)
            Me.columnCUST_STREET = New DataColumn("CUST_STREET", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_STREET)
            Me.columnCUST_CITY = New DataColumn("CUST_CITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_CITY)
            Me.columnCUST_STATE = New DataColumn("CUST_STATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_STATE)
            Me.columnCUST_ZIP = New DataColumn("CUST_ZIP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_ZIP)
            Me.columnCUST_CONTACT = New DataColumn("CUST_CONTACT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_CONTACT)
            Me.columnCUST_PHONE = New DataColumn("CUST_PHONE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_PHONE)
            Me.columnCUST_FAX = New DataColumn("CUST_FAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_FAX)
            Me.columnCUST_GIFT = New DataColumn("CUST_GIFT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_GIFT)
            Me.columnCUST_TCODE = New DataColumn("CUST_TCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_TCODE)
            Me.columnCUST_TAXNO = New DataColumn("CUST_TAXNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_TAXNO)
            Me.columnCUST_LIMIT = New DataColumn("CUST_LIMIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUST_LIMIT)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCUST_KEY}, true))
            Me.columnCUST_KEY.AllowDBNull = false
            Me.columnCUST_KEY.Unique = true
        End Sub
        
        Public Function NewCUSTOMERSRow() As CUSTOMERSRow
            Return CType(Me.NewRow,CUSTOMERSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CUSTOMERSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CUSTOMERSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CUSTOMERSRowChangedEvent) Is Nothing) Then
                RaiseEvent CUSTOMERSRowChanged(Me, New CUSTOMERSRowChangeEvent(CType(e.Row,CUSTOMERSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CUSTOMERSRowChangingEvent) Is Nothing) Then
                RaiseEvent CUSTOMERSRowChanging(Me, New CUSTOMERSRowChangeEvent(CType(e.Row,CUSTOMERSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CUSTOMERSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CUSTOMERSRowDeleted(Me, New CUSTOMERSRowChangeEvent(CType(e.Row,CUSTOMERSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CUSTOMERSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CUSTOMERSRowDeleting(Me, New CUSTOMERSRowChangeEvent(CType(e.Row,CUSTOMERSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCUSTOMERSRow(ByVal row As CUSTOMERSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CUSTOMERSRow
        Inherits DataRow
        
        Private tableCUSTOMERS As CUSTOMERSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCUSTOMERS = CType(Me.Table,CUSTOMERSDataTable)
        End Sub
        
        Public Property CUST_KEY As Integer
            Get
                Return CType(Me(Me.tableCUSTOMERS.CUST_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_KEYColumn) = value
            End Set
        End Property
        
        Public Property CUST_RTYPE As Short
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_RTYPEColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_RTYPEColumn) = value
            End Set
        End Property
        
        Public Property CUST_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_NAMEColumn) = value
            End Set
        End Property
        
        Public Property CUST_STREET As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_STREETColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_STREETColumn) = value
            End Set
        End Property
        
        Public Property CUST_CITY As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_CITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_CITYColumn) = value
            End Set
        End Property
        
        Public Property CUST_STATE As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_STATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_STATEColumn) = value
            End Set
        End Property
        
        Public Property CUST_ZIP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_ZIPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_ZIPColumn) = value
            End Set
        End Property
        
        Public Property CUST_CONTACT As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_CONTACTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_CONTACTColumn) = value
            End Set
        End Property
        
        Public Property CUST_PHONE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_PHONEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_PHONEColumn) = value
            End Set
        End Property
        
        Public Property CUST_FAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_FAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_FAXColumn) = value
            End Set
        End Property
        
        Public Property CUST_GIFT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_GIFTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_GIFTColumn) = value
            End Set
        End Property
        
        Public Property CUST_TCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_TCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_TCODEColumn) = value
            End Set
        End Property
        
        Public Property CUST_TAXNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_TAXNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_TAXNOColumn) = value
            End Set
        End Property
        
        Public Property CUST_LIMIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMERS.CUST_LIMITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMERS.CUST_LIMITColumn) = value
            End Set
        End Property
        
        Public Function IsCUST_RTYPENull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_RTYPEColumn)
        End Function
        
        Public Sub SetCUST_RTYPENull()
            Me(Me.tableCUSTOMERS.CUST_RTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_NAMEColumn)
        End Function
        
        Public Sub SetCUST_NAMENull()
            Me(Me.tableCUSTOMERS.CUST_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_STREETNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_STREETColumn)
        End Function
        
        Public Sub SetCUST_STREETNull()
            Me(Me.tableCUSTOMERS.CUST_STREETColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_CITYNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_CITYColumn)
        End Function
        
        Public Sub SetCUST_CITYNull()
            Me(Me.tableCUSTOMERS.CUST_CITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_STATENull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_STATEColumn)
        End Function
        
        Public Sub SetCUST_STATENull()
            Me(Me.tableCUSTOMERS.CUST_STATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_ZIPNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_ZIPColumn)
        End Function
        
        Public Sub SetCUST_ZIPNull()
            Me(Me.tableCUSTOMERS.CUST_ZIPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_CONTACTNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_CONTACTColumn)
        End Function
        
        Public Sub SetCUST_CONTACTNull()
            Me(Me.tableCUSTOMERS.CUST_CONTACTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_PHONENull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_PHONEColumn)
        End Function
        
        Public Sub SetCUST_PHONENull()
            Me(Me.tableCUSTOMERS.CUST_PHONEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_FAXNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_FAXColumn)
        End Function
        
        Public Sub SetCUST_FAXNull()
            Me(Me.tableCUSTOMERS.CUST_FAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_GIFTNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_GIFTColumn)
        End Function
        
        Public Sub SetCUST_GIFTNull()
            Me(Me.tableCUSTOMERS.CUST_GIFTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_TCODENull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_TCODEColumn)
        End Function
        
        Public Sub SetCUST_TCODENull()
            Me(Me.tableCUSTOMERS.CUST_TCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_TAXNONull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_TAXNOColumn)
        End Function
        
        Public Sub SetCUST_TAXNONull()
            Me(Me.tableCUSTOMERS.CUST_TAXNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUST_LIMITNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMERS.CUST_LIMITColumn)
        End Function
        
        Public Sub SetCUST_LIMITNull()
            Me(Me.tableCUSTOMERS.CUST_LIMITColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CUSTOMERSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CUSTOMERSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CUSTOMERSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CUSTOMERSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
